// AutoGain Simple JSFX Plugin
// Упрощенная автоматическая регулировка громкости
// Автор: AI Assistant
// Версия: 1.0

desc:AutoGain Simple - Easy Volume Automation

// Параметры плагина
slider1:0<0,1,0.001>Enable AutoGain
slider2:-30<-60,0,0.1>Target Min (dB)
slider3:-10<-30,0,0.1>Target Max (dB)
slider4:0.1<0.01,1,0.01>Smoothing
slider5:0<-20,20,0.1>Input Gain (dB)
slider6:0<-20,20,0.1>Output Gain (dB)
slider7:0<0,1,0.001>Limiter
slider8:-0.1<-20,0,0.1>Limiter Threshold (dB)

// Внутренние переменные
@init
// Буферы для анализа
buffer_size = 2048;
analysis_buffer = 0;
buffer_idx = 0;

// Текущие значения
current_level = 0;
moving_average = 0;
smoothing_factor = 0.1;

// Переменные лимитера
limiter_gain = 1;

// Инициализация буфера
analysis_buffer = 0;

// Функция для обновления скользящего среднего
function update_moving_average(current_value, old_avg)
(
  new_avg = old_avg * (1 - smoothing_factor) + current_value * smoothing_factor;
  new_avg;
);

// Функция для обновления буфера анализа
function update_analysis_buffer(input)
(
  analysis_buffer[buffer_idx] = abs(input);
  buffer_idx = (buffer_idx + 1) % buffer_size;
);

// Функция для вычисления среднего уровня
function calculate_average_level()
(
  sum = 0;
  i = 0;
  while (i < buffer_size)
  (
    sum += analysis_buffer[i];
    i += 1;
  );
  current_level = sum / buffer_size;
);

// Функция для вычисления коэффициента усиления
function calculate_gain()
(
  // Преобразование в dB
  level_db = 20 * log10(current_level);
  
  // Обновление скользящего среднего
  moving_average = update_moving_average(level_db, moving_average);
  
  // Вычисление целевой громкости
  target_level = (slider2 + slider3) / 2;
  target_range = slider3 - slider2;
  
  // Вычисление коэффициента усиления
  gain_db = target_level - moving_average;
  
  // Ограничение усиления в пределах целевого диапазона
  if (gain_db > target_range / 2) gain_db = target_range / 2;
  if (gain_db < -target_range / 2) gain_db = -target_range / 2;
  
  // Преобразование в линейный коэффициент
  gain_linear = 10^(gain_db / 20);
  
  gain_linear;
);

// Функция для лимитера
function limiter_process(input)
(
  peak_value = abs(input);
  threshold_linear = 10^(slider8 / 20);
  
  if (peak_value > threshold_linear)
  (
    limiter_gain = threshold_linear / peak_value;
  )
  else
  (
    limiter_gain = 1;
  );
  
  input * limiter_gain;
);

@slider
// Обновление коэффициента сглаживания
smoothing_factor = slider4;

@sample
// Основная обработка
spl0 = spl0 * 10^(slider5 / 20); // Input Gain
spl1 = spl1 * 10^(slider5 / 20);

// Обновление буфера анализа
update_analysis_buffer(spl0);
update_analysis_buffer(spl1);

// Вычисление среднего уровня каждые 64 сэмпла
sample_count = (sample_count + 1) % 64;
if (sample_count == 0)
(
  calculate_average_level();
);

// Вычисление коэффициента усиления AutoGain
if (slider1 > 0.5)
(
  gain_coeff = calculate_gain();
  spl0 = spl0 * gain_coeff;
  spl1 = spl1 * gain_coeff;
);

// Применение лимитера
if (slider7 > 0.5)
(
  spl0 = limiter_process(spl0);
  spl1 = limiter_process(spl1);
);

// Output Gain
spl0 = spl0 * 10^(slider6 / 20);
spl1 = spl1 * 10^(slider6 / 20);

@gfx 300 200
// Визуализация
gfx_set(0.2, 0.2, 0.2, 1);
gfx_fillrect(0, 0, gfx_w, gfx_h);

// Заголовок
gfx_set(1, 1, 1, 1);
gfx_x = 10;
gfx_y = 20;
gfx_drawstr("AutoGain Simple v1.0");

// Отображение текущего уровня
gfx_x = 10;
gfx_y = 45;
gfx_drawstr("Current Level: " + sprintf("%.1f", 20 * log10(current_level)) + " dB");

// Отображение скользящего среднего
gfx_x = 10;
gfx_y = 65;
gfx_drawstr("Moving Avg: " + sprintf("%.1f", moving_average) + " dB");

// Отображение целевого диапазона
gfx_x = 10;
gfx_y = 85;
gfx_drawstr("Target: " + sprintf("%.1f", slider2) + " to " + sprintf("%.1f", slider3) + " dB");

// Отображение коэффициента усиления
gfx_x = 10;
gfx_y = 105;
gain_db = 20 * log10(calculate_gain());
gfx_drawstr("Gain: " + sprintf("%.1f", gain_db) + " dB");

// Отображение статуса лимитера
gfx_x = 10;
gfx_y = 125;
if (slider7 > 0.5)
(
  gfx_set(1, 0.5, 0, 1);
  gfx_drawstr("Limiter: ON");
)
else
(
  gfx_set(0.5, 0.5, 0.5, 1);
  gfx_drawstr("Limiter: OFF");
);

// График уровня
gfx_x = 150;
gfx_y = 20;
gfx_set(0.3, 0.3, 0.3, 1);
gfx_fillrect(gfx_x, gfx_y, 140, 80);

// Отрисовка целевого диапазона
gfx_set(0, 1, 0, 0.3);
target_y1 = gfx_y + 80 - (slider2 + 60) * 1.33;
target_y2 = gfx_y + 80 - (slider3 + 60) * 1.33;
gfx_fillrect(gfx_x, target_y2, 140, target_y1 - target_y2);

// Отрисовка текущего уровня
gfx_set(1, 1, 0, 1);
current_level_db = moving_average;
if (current_level_db < -60) current_level_db = -60;
if (current_level_db > 0) current_level_db = 0;
level_y = gfx_y + 80 - (current_level_db + 60) * 1.33;
gfx_fillrect(gfx_x, level_y - 2, 140, 4);

// Отрисовка лимитера
if (slider7 > 0.5)
(
  gfx_set(1, 0, 0, 0.8);
  limiter_y = gfx_y + 80 - (slider8 + 60) * 1.33;
  gfx_fillrect(gfx_x, limiter_y - 1, 140, 2);
);

// Подписи осей
gfx_set(1, 1, 1, 1);
gfx_x = 150;
gfx_y = 110;
gfx_drawstr("Level (dB)");
gfx_x = 150;
gfx_y = 125;
gfx_drawstr("-60     -30      0");

// Информация о параметрах
gfx_x = 150;
gfx_y = 150;
gfx_set(0.7, 0.7, 0.7, 1);
gfx_drawstr("Smoothing: " + sprintf("%.2f", slider4));
gfx_x = 150;
gfx_y = 170;
gfx_drawstr("In: " + sprintf("%.1f", slider5) + "dB  Out: " + sprintf("%.1f", slider6) + "dB");