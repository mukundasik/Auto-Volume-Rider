// AutoGain Professional JSFX Plugin
// Профессиональная автоматическая регулировка громкости с точным анализом LUFS
// Автор: AI Assistant
// Версия: 2.0

desc:AutoGain Professional - Advanced LUFS Analysis & Limiter

// Параметры плагина
slider1:0<0,1,0.001>Bypass (0=Off, 1=On)
slider2:-30<-60,0,0.1>Target Min (dB)
slider3:-10<-30,0,0.1>Target Max (dB)
slider4:0.1<0.01,1,0.01>Moving Average Smoothing
slider5:0<-20,20,0.1>Input Gain (dB)
slider6:0<-20,20,0.1>Output Gain (dB)
slider7:0<0,1,0.001>Limiter Enable
slider8:-0.1<-20,0,0.1>Limiter Threshold (dB)
slider9:0<0,1,0.001>True Peak Mode
slider10:0.1<0.01,1,0.01>Limiter Release (s)
slider11:0<0,3,1>Analysis Mode (0=Peak, 1=RMS, 2=LUFS-S, 3=LUFS-M)
slider12:0<0,1,0.001>Lookahead Mode
slider13:0.001<0.001,0.1,0.001>Attack Time (s)
slider14:0.1<0.01,2,0.01>Release Time (s)

// Внутренние переменные
@init
// Буферы для анализа
peak_buffer_size = 2048;
rms_buffer_size = 2048;
lufs_buffer_size = 48000; // 1 секунда при 48kHz
lookahead_buffer_size = 1024;

peak_buffer = 0;
rms_buffer = 0;
lufs_buffer = 0;
lookahead_buffer = 0;

// Индексы буферов
peak_idx = 0;
rms_idx = 0;
lufs_idx = 0;
lookahead_idx = 0;

// Текущие значения
current_peak = 0;
current_rms = 0;
current_lufs_s = 0;
current_lufs_m = 0;

// Скользящие средние
moving_avg_peak = 0;
moving_avg_rms = 0;
moving_avg_lufs_s = 0;
moving_avg_lufs_m = 0;

// Коэффициенты сглаживания
smoothing_factor = 0.1;

// Переменные лимитера
limiter_gain = 1;
limiter_peak = 0;
true_peak_left = 0;
true_peak_right = 0;

// Переменные для атаки и релиза
attack_coeff = 0;
release_coeff = 0;
gain_smoother = 1;

// Счетчики для LUFS
lufs_sample_count = 0;
lufs_sum = 0;

// Переменные для True Peak
oversample_factor = 4;
oversample_buffer = 0;
oversample_idx = 0;

// Инициализация буферов
peak_buffer = 0;
rms_buffer = 0;
lufs_buffer = 0;
lookahead_buffer = 0;
oversample_buffer = 0;

@slider
// Обновление коэффициентов
smoothing_factor = slider4;
attack_coeff = exp(-1 / (slider13 * srate));
release_coeff = exp(-1 / (slider14 * srate));

@sample
// Основная обработка
spl0 = spl0 * 10^(slider5 / 20); // Input Gain
spl1 = spl1 * 10^(slider5 / 20);

// Lookahead processing
if (slider12 > 0.5)
(
  // Простая реализация lookahead
  lookahead_delay = lookahead_buffer_size / 2;
  delayed_idx = (lookahead_idx - lookahead_delay + lookahead_buffer_size) % lookahead_buffer_size;
  
  spl0 = lookahead_buffer[delayed_idx];
  spl1 = lookahead_buffer[delayed_idx];
);

// Обновление буферов анализа
// Peak buffer
peak_buffer[peak_idx] = abs(spl0);
peak_idx = (peak_idx + 1) % peak_buffer_size;

// RMS buffer
rms_buffer[rms_idx] = spl0 * spl0;
rms_idx = (rms_idx + 1) % rms_buffer_size;

// LUFS buffer
lufs_buffer[lufs_idx] = spl0;
lufs_idx = (lufs_idx + 1) % lufs_buffer_size;

// Lookahead buffer
lookahead_buffer[lookahead_idx] = spl0;
lookahead_idx = (lookahead_idx + 1) % lookahead_buffer_size;

// Вычисление средних значений каждые 64 сэмпла
lufs_sample_count += 1;
if (lufs_sample_count >= 64)
(
  // Peak average
  peak_sum = 0;
  i = 0;
  while (i < peak_buffer_size)
  (
    peak_sum += peak_buffer[i];
    i += 1;
  );
  current_peak = peak_sum / peak_buffer_size;
  
  // RMS average
  rms_sum = 0;
  i = 0;
  while (i < rms_buffer_size)
  (
    rms_sum += rms_buffer[i];
    i += 1;
  );
  current_rms = sqrt(rms_sum / rms_buffer_size);
  
  // LUFS calculation (упрощенная версия)
  lufs_sum = 0;
  i = 0;
  while (i < lufs_buffer_size)
  (
    sample = lufs_buffer[i];
    weighted_sample = sample * 1.0; // Упрощенная версия K-weighting
    lufs_sum += weighted_sample * weighted_sample;
    i += 1;
  );
  
  if (lufs_sum > 0)
  (
    current_lufs_s = 20 * log10(sqrt(lufs_sum / lufs_buffer_size));
    current_lufs_m = current_lufs_s; // Упрощенная версия LUFS-M
  )
  else
  (
    current_lufs_s = -60;
    current_lufs_m = -60;
  );
  
  lufs_sample_count = 0;
);

// Вычисление коэффициента усиления AutoGain
if (slider1 > 0.5)
(
  // Выбор метрики в зависимости от режима анализа
  metric_value = 0;
  if (slider11 == 0) metric_value = 20 * log10(current_peak);
  else if (slider11 == 1) metric_value = 20 * log10(current_rms);
  else if (slider11 == 2) metric_value = current_lufs_s;
  else metric_value = current_lufs_m;
  
  // Обновление скользящего среднего
  if (slider11 == 0) moving_avg_peak = moving_avg_peak * (1 - smoothing_factor) + metric_value * smoothing_factor;
  else if (slider11 == 1) moving_avg_rms = moving_avg_rms * (1 - smoothing_factor) + metric_value * smoothing_factor;
  else if (slider11 == 2) moving_avg_lufs_s = moving_avg_lufs_s * (1 - smoothing_factor) + metric_value * smoothing_factor;
  else moving_avg_lufs_m = moving_avg_lufs_m * (1 - smoothing_factor) + metric_value * smoothing_factor;
  
  // Выбор текущего скользящего среднего
  current_moving_avg = 0;
  if (slider11 == 0) current_moving_avg = moving_avg_peak;
  else if (slider11 == 1) current_moving_avg = moving_avg_rms;
  else if (slider11 == 2) current_moving_avg = moving_avg_lufs_s;
  else current_moving_avg = moving_avg_lufs_m;
  
  // Вычисление целевой громкости
  target_level = (slider2 + slider3) / 2;
  target_range = slider3 - slider2;
  
  // Вычисление коэффициента усиления
  gain_db = target_level - current_moving_avg;
  
  // Ограничение усиления в пределах целевого диапазона
  if (gain_db > target_range / 2) gain_db = target_range / 2;
  if (gain_db < -target_range / 2) gain_db = -target_range / 2;
  
  // Применение атаки и релиза
  if (gain_db > 20 * log10(gain_smoother))
  (
    gain_smoother = gain_smoother * attack_coeff + 10^(gain_db / 20) * (1 - attack_coeff);
  )
  else
  (
    gain_smoother = gain_smoother * release_coeff + 10^(gain_db / 20) * (1 - release_coeff);
  );
  
  gain_coeff = gain_smoother;
  spl0 = spl0 * gain_coeff;
  spl1 = spl1 * gain_coeff;
);

// Применение лимитера
if (slider7 > 0.5)
(
  // True Peak detection
  peak_value = abs(spl0);
  
  if (slider9 > 0.5)
  (
    // Простая интерполяция для True Peak
    prev_sample = oversample_buffer[(oversample_idx - 1 + oversample_factor) % oversample_factor];
    next_sample = oversample_buffer[(oversample_idx + 1) % oversample_factor];
    
    interp_peak = max(peak_value, abs(prev_sample), abs(next_sample));
    peak_value = interp_peak;
  );
  
  // Обновление oversample buffer
  oversample_buffer[oversample_idx] = spl0;
  oversample_idx = (oversample_idx + 1) % oversample_factor;
  
  // Обновление True Peak для каналов
  true_peak_left = max(true_peak_left, peak_value);
  true_peak_right = max(true_peak_right, peak_value);
  
  // Вычисление коэффициента лимитера
  threshold_linear = 10^(slider8 / 20);
  
  if (peak_value > threshold_linear)
  (
    limiter_gain = threshold_linear / peak_value;
  )
  else
  (
    limiter_gain = 1;
  );
  
  // Применение release
  limiter_gain = limiter_gain * (1 - slider10) + 1 * slider10;
  
  // Ограничение минимального значения
  if (limiter_gain < 0.001) limiter_gain = 0.001;
  
  spl0 = spl0 * limiter_gain;
  spl1 = spl1 * limiter_gain;
);

// Output Gain
spl0 = spl0 * 10^(slider6 / 20);
spl1 = spl1 * 10^(slider6 / 20);

// Сброс True Peak каждые 1000 сэмплов
if (lufs_sample_count == 0)
(
  true_peak_left = 0;
  true_peak_right = 0;
);

@gfx 500 350
// Визуализация
gfx_set(0.1, 0.1, 0.15, 1);
gfx_fillrect(0, 0, gfx_w, gfx_h);

// Заголовок
gfx_set(1, 1, 1, 1);
gfx_x = 10;
gfx_y = 20;
gfx_drawstr("AutoGain Professional v2.0");

// Отображение текущих значений
gfx_set(0.8, 0.8, 0.8, 1);
gfx_x = 10;
gfx_y = 45;
gfx_drawstr("Peak: " + sprintf("%.1f", 20 * log10(current_peak)) + " dB");

gfx_x = 10;
gfx_y = 65;
gfx_drawstr("RMS: " + sprintf("%.1f", 20 * log10(current_rms)) + " dB");

gfx_x = 10;
gfx_y = 85;
gfx_drawstr("LUFS-S: " + sprintf("%.1f", current_lufs_s) + " LUFS");

gfx_x = 10;
gfx_y = 105;
gfx_drawstr("LUFS-M: " + sprintf("%.1f", current_lufs_m) + " LUFS");

// Отображение скользящего среднего
gfx_x = 10;
gfx_y = 135;
current_moving_avg = 0;
if (slider11 == 0) current_moving_avg = moving_avg_peak;
else if (slider11 == 1) current_moving_avg = moving_avg_rms;
else if (slider11 == 2) current_moving_avg = moving_avg_lufs_s;
else current_moving_avg = moving_avg_lufs_m;

gfx_drawstr("Moving Avg: " + sprintf("%.1f", current_moving_avg) + " dB");

// Отображение целевого диапазона
gfx_x = 10;
gfx_y = 165;
gfx_drawstr("Target: " + sprintf("%.1f", slider2) + " to " + sprintf("%.1f", slider3) + " dB");

// Отображение коэффициента усиления
gfx_x = 10;
gfx_y = 195;
gain_db = 20 * log10(gain_smoother);
gfx_drawstr("Gain: " + sprintf("%.1f", gain_db) + " dB");

// Отображение статуса лимитера
gfx_x = 10;
gfx_y = 225;
if (slider7 > 0.5)
(
  gfx_set(1, 0.5, 0, 1);
  gfx_drawstr("Limiter: ON");
)
else
(
  gfx_set(0.5, 0.5, 0.5, 1);
  gfx_drawstr("Limiter: OFF");
);

// Отображение True Peak
gfx_x = 10;
gfx_y = 255;
if (slider9 > 0.5)
(
  true_peak_db = 20 * log10(max(true_peak_left, true_peak_right));
  gfx_set(1, 0, 0, 1);
  gfx_drawstr("True Peak: " + sprintf("%.1f", true_peak_db) + " dB");
)
else
(
  gfx_set(0.5, 0.5, 0.5, 1);
  gfx_drawstr("True Peak: OFF");
);

// Отображение режима анализа
gfx_x = 10;
gfx_y = 285;
analysis_mode_names = "Peak,RMS,LUFS-S,LUFS-M";
current_mode = slider11;
gfx_drawstr("Analysis: " + analysis_mode_names);

// График уровня
gfx_x = 250;
gfx_y = 20;
gfx_set(0.2, 0.2, 0.25, 1);
gfx_fillrect(gfx_x, gfx_y, 230, 120);

// Отрисовка целевого диапазона
gfx_set(0, 0.8, 0, 0.3);
target_y1 = gfx_y + 120 - (slider2 + 60) * 2;
target_y2 = gfx_y + 120 - (slider3 + 60) * 2;
gfx_fillrect(gfx_x, target_y2, 230, target_y1 - target_y2);

// Отрисовка текущего уровня
gfx_set(1, 1, 0, 1);
current_level = current_moving_avg;
if (current_level < -60) current_level = -60;
if (current_level > 0) current_level = 0;
level_y = gfx_y + 120 - (current_level + 60) * 2;
gfx_fillrect(gfx_x, level_y - 2, 230, 4);

// Отрисовка лимитера
if (slider7 > 0.5)
(
  gfx_set(1, 0, 0, 0.8);
  limiter_y = gfx_y + 120 - (slider8 + 60) * 2;
  gfx_fillrect(gfx_x, limiter_y - 1, 230, 2);
);

// Подписи осей
gfx_set(1, 1, 1, 1);
gfx_x = 250;
gfx_y = 150;
gfx_drawstr("Level (dB)");
gfx_x = 250;
gfx_y = 165;
gfx_drawstr("-60     -30      0");

// Информация о параметрах
gfx_x = 250;
gfx_y = 200;
gfx_set(0.7, 0.7, 0.7, 1);
gfx_drawstr("Smoothing: " + sprintf("%.2f", slider4));
gfx_x = 250;
gfx_y = 220;
gfx_drawstr("Attack: " + sprintf("%.3f", slider13) + "s");
gfx_x = 250;
gfx_y = 240;
gfx_drawstr("Release: " + sprintf("%.2f", slider14) + "s");

// Статус lookahead
gfx_x = 250;
gfx_y = 260;
if (slider12 > 0.5)
(
  gfx_set(0, 1, 1, 1);
  gfx_drawstr("Lookahead: ON");
)
else
(
  gfx_set(0.5, 0.5, 0.5, 1);
  gfx_drawstr("Lookahead: OFF");
);

// Отображение входного и выходного усиления
gfx_x = 250;
gfx_y = 280;
gfx_set(0.8, 0.8, 0.8, 1);
gfx_drawstr("In: " + sprintf("%.1f", slider5) + "dB  Out: " + sprintf("%.1f", slider6) + "dB");